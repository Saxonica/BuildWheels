name: Build Wheels

on: push

jobs:
  load_config:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.check_step.outputs.branch }}
      reponame: ${{ steps.check_step.outputs.reponame }}
      tag: ${{ steps.check_step.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Load the configuration
        id: check_step
        run: |
          raw=${{ github.repository }}
          reponame=${raw##*/}
          echo "reponame=$reponame" >> $GITHUB_OUTPUT
          jq . config.json
          echo test=`jq -r .user config.json`
          echo user=`jq -r .user config.json` >> $GITHUB_OUTPUT
          echo mac=`jq -r .mac config.json` >> $GITHUB_OUTPUT
          echo windows=`jq -r .windows config.json` >> $GITHUB_OUTPUT
          echo linux=`jq -r .linux config.json` >> $GITHUB_OUTPUT
          echo date=`jq -r .date config.json` >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: load_config
    env:
      W_USER: ${{ needs.load_config.outputs.user }}
      W_MAC: ${{ needs.load_config.outputs.mac }}
      W_WINDOWS: ${{ needs.load_config.outputs.windows }}
      W_LINUX: ${{ needs.load_config.outputs.linux }}
      W_DATE: ${{ needs.load_config.outputs.date }}
      W_REPO: ${{ needs.load_config.outputs.reponame }}

    strategy:
      matrix:
        os: [macos-11, ubuntu-20.04, windows-2019]

    steps:
      - uses: actions/checkout@v3

      - name: Summarize the config
        run: |
          echo Date: ${{ env.W_DATE }}
          echo User: ${{ env.W_USER }}
          echo Mac: ${{ env.W_MAC }}
          echo Linux: ${{ env.W_LINUX }}
          echo Windows: ${{ env.W_WINDOWS }}
          echo Repository: ${{ env.W_REPO }}

      - uses: actions/setup-python@v3

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.11.1

      - name: Get the Mac binaries
        if: matrix.os == 'macos-11' && env.W_MAC == true
        run: |
          curl -o libs.tar.gz https://dev.saxonica.com/wheel-binaries/${{ env.W_USER }}/mac.wheels.tar.gz
          tar zxf libs.tar.gz
          rm -f libs.tar.gz

      - name: Copy the Mac binaries to a fixed location
        if: matrix.os == 'macos-11' && env.W_MAC == true
        run: |
          sudo mkdir -p ${{ env.W_MACpath }}/build/c
          sudo cp mac/*/libs/darwin/* ${{ env.W_MACpath }}/build/c

      - name: Build the Mac wheels
        if: matrix.os == 'macos-11' && env.W_MAC == true
        run: |
          cd mac/eec_pypi && python -m cibuildwheel --output-dir ../../macwheelhouse --platform macos && cd ../../
          cd mac/pec_pypi && python -m cibuildwheel --output-dir ../../macwheelhouse --platform macos && cd ../../
          cd mac/hec_pypi && python -m cibuildwheel --output-dir ../../macwheelhouse --platform macos && cd ../../

      - name: Get the Linux binaries
        if: matrix.os == 'ubuntu-20.04' && env.W_LINUX == true
        run: |
          curl -o libs.tar.gz https://dev.saxonica.com/wheel-binaries/${{ env.W_USER }}/linux.wheels.tar.gz
          tar zxf libs.tar.gz
          rm -f libs.tar.gz

      - name: Build the Linux wheels
        if: matrix.os == 'ubuntu-20.04' && env.W_LINUX == true
        run: |
          cd linux/eec_pypi && python -m cibuildwheel --output-dir ../../linuxwheelhouse --platform linux && cd ../../
          cd linux/pec_pypi && python -m cibuildwheel --output-dir ../../linuxwheelhouse --platform linux && cd ../../
          cd linux/hec_pypi && python -m cibuildwheel --output-dir ../../linuxwheelhouse --platform linux && cd ../../

      - name: Get the Windows binaries
        if: matrix.os == 'windows-2019' && env.W_WINDOWS == true
        run: |
          curl -o libs.tar.gz https://dev.saxonica.com/wheel-binaries/${{ env.W_USER }}/windows.wheels.tar.gz
          tar zxf libs.tar.gz
          rm -f libs.tar.gz

      - name: Build the Windows wheels
        if: matrix.os == 'windows-2019' && env.W_WINDOWS == true
        run: |
          cd windows/eec_pypi && python -m cibuildwheel --output-dir ../../windowswheelhouse --platform windows && cd ../../
          cd windows/pec_pypi && python -m cibuildwheel --output-dir ../../windowswheelhouse --platform windows && cd ../../
          cd windows/hec_pypi && python -m cibuildwheel --output-dir ../../windowswheelhouse --platform linux && cd ../../

      - uses: actions/upload-artifact@v3
        if: matrix.os == 'ubuntu-20.04' && env.W_LINUX == true
        with:
          name: linux-wheels
          path: ./linuxwheelhouse/*.whl

      - uses: actions/upload-artifact@v3
        if: matrix.os == 'macos-11' && env.W_MAC == true
        with:
          name: mac-wheels
          path: ./macwheelhouse/*.whl

      - uses: actions/upload-artifact@v3
        if: matrix.os == 'windows-2019' && env.W_WINDOWS == true
        with:
          name: windows-wheels
          path: ./windowswheelhouse/*.whl
